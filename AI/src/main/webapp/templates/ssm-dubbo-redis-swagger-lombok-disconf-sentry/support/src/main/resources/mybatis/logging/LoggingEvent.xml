<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<!-- 不使用namespace的话sql搜索定位会比较方便 -->
<mapper namespace="LoggingEvent">

    <resultMap id="rs_base" type="LoggingEvent">
        <result property="timestmp" column="timestmp"/>
        <result property="formattedMessage" column="formatted_message"/>
        <result property="loggerName" column="logger_name"/>
        <result property="levelString" column="level_string"/>
        <result property="threadName" column="thread_name"/>
        <result property="referenceFlag" column="reference_flag"/>
        <result property="arg0" column="arg0"/>
        <result property="arg1" column="arg1"/>
        <result property="arg2" column="arg2"/>
        <result property="arg3" column="arg3"/>
        <result property="callerFilename" column="caller_filename"/>
        <result property="callerClass" column="caller_class"/>
        <result property="callerMethod" column="caller_method"/>
        <result property="callerLine" column="caller_line"/>
        <result property="eventId" column="event_id"/>
    </resultMap>

    <!-- 用于select查询公用抽取的列 -->
    <sql id="LoggingEvent.columns">
	   <![CDATA[

        timestmp,formatted_message,logger_name,level_string,thread_name,reference_flag,arg0,arg1,arg2,arg3,caller_filename,caller_class,caller_method,caller_line,event_id

        ]]>
    </sql>

    <insert id="LoggingEvent.insert" useGeneratedKeys="true" keyProperty="eventId" parameterType="LoggingEvent">
        INSERT INTO logging_event (
        timestmp ,
        formatted_message ,
        logger_name ,
        level_string ,
        thread_name ,
        reference_flag ,
        arg0 ,
        arg1 ,
        arg2 ,
        arg3 ,
        caller_filename ,
        caller_class ,
        caller_method ,
        caller_line ,
        event_id
        ) VALUES (
        ${r'#{timestmp}'} ,
        ${r'#{formattedMessage}'} ,
        ${r'#{loggerName}'} ,
        ${r'#{levelString}'} ,
        ${r'#{threadName}'} ,
        ${r'#{referenceFlag}'} ,
        ${r'#{arg0}'} ,
        ${r'#{arg1}'} ,
        ${r'#{arg2}'} ,
        ${r'#{arg3}'} ,
        ${r'#{callerFilename}'} ,
        ${r'#{callerClass}'} ,
        ${r'#{callerMethod}'} ,
        ${r'#{callerLine}'} ,
        ${r'#{eventId}'}
        )
        <selectKey keyProperty="id" resultType="long">
            select LAST_INSERT_ID()
        </selectKey>
    </insert>

    <update id="LoggingEvent.update" parameterType="LoggingEvent">
        UPDATE logging_event SET
        timestmp = ${r'#{timestmp}'} ,
        formatted_message = ${r'#{formattedMessage}'} ,
        logger_name = ${r'#{loggerName}'} ,
        level_string = ${r'#{levelString}'} ,
        thread_name = ${r'#{threadName}'} ,
        reference_flag = ${r'#{referenceFlag}'} ,
        arg0 = ${r'#{arg0}'} ,
        arg1 = ${r'#{arg1}'} ,
        arg2 = ${r'#{arg2}'} ,
        arg3 = ${r'#{arg3}'} ,
        caller_filename = ${r'#{callerFilename}'} ,
        caller_class = ${r'#{callerClass}'} ,
        caller_method = ${r'#{callerMethod}'} ,
        caller_line = ${r'#{callerLine}'}
        where
        <if test="eventId!=null and eventId!=''">
            event_id = ${r'#{eventId}'}
        </if>
    </update>

    <delete id="LoggingEvent.delete">
        DELETE FROM logging_event
        where
        <if test="eventId!=null and eventId!=''">
            event_id = ${r'#{eventId}'}
        </if>
    </delete>

    <select id="LoggingEvent.load" resultMap="rs_base">
        SELECT * FROM logging_event where event_id = ${r'#{eventId}'}
    </select>

    <sql id="LoggingEvent.where">
        <where>
            <if test="timestmp!=null">
                AND timestmp = ${r'#{timestmp}'}
            </if>
            <if test="formattedMessage!=null and formattedMessage!=''">
                AND formatted_message = ${r'#{formattedMessage}'}
            </if>
            <if test="loggerName!=null and loggerName!=''">
                AND logger_name = ${r'#{loggerName}'}
            </if>
            <if test="levelString!=null and levelString!=''">
                AND level_string = ${r'#{levelString}'}
            </if>
            <if test="threadName!=null and threadName!=''">
                AND thread_name = ${r'#{threadName}'}
            </if>
            <if test="referenceFlag!=null and referenceFlag!=''">
                AND reference_flag = ${r'#{referenceFlag}'}
            </if>
            <if test="arg0!=null and arg0!=''">
                AND arg0 = ${r'#{arg0}'}
            </if>
            <if test="arg1!=null and arg1!=''">
                AND arg1 = ${r'#{arg1}'}
            </if>
            <if test="arg2!=null and arg2!=''">
                AND arg2 = ${r'#{arg2}'}
            </if>
            <if test="arg3!=null and arg3!=''">
                AND arg3 = ${r'#{arg3}'}
            </if>
            <if test="callerFilename!=null and callerFilename!=''">
                AND caller_filename = ${r'#{callerFilename}'}
            </if>
            <if test="callerClass!=null and callerClass!=''">
                AND caller_class = ${r'#{callerClass}'}
            </if>
            <if test="callerMethod!=null and callerMethod!=''">
                AND caller_method = ${r'#{callerMethod}'}
            </if>
            <if test="callerLine!=null and callerLine!=''">
                AND caller_line = ${r'#{callerLine}'}
            </if>
            <if test="eventId!=null">
                AND event_id = ${r'#{eventId}'}
            </if>
        </where>
    </sql>


    <select id="LoggingEvent.count" resultType="int">
        SELECT count(1) FROM logging_event
        <include refid="LoggingEvent.where"/>
    </select>


    <select id="LoggingEvent.query" resultMap="rs_base">
        SELECT
        <include refid="LoggingEvent.columns"/>
        FROM logging_event
        <include refid="LoggingEvent.where"/>
        <if test="sortColumns!=null and sortColumns!=''">
            ORDER BY ${r'${sortColumns}'}
        </if>
    </select>

    <!--查询日志列表-->
    <select id="LoggingEvent.listLoggingEvent" resultMap="rs_base">
        SELECT
        <include refid="LoggingEvent.columns"/>
         FROM logging_event
    </select>

    <select id="LoggingEvent.countLoggingEvent" resultType="int">
        SELECT count(1)
        FROM logging_event
    </select>

    <!--关键词搜索日志-->
    <select id="LoggingEvent.listLoggingEventForSearch" parameterType="String" resultMap="rs_base">
        SELECT *
        FROM logging_event
        WHERE formatted_message like CONCAT('%','${r'${value}'}','%' )
    </select>
    <select id="LoggingEvent.countLoggingEventForSearch" parameterType="String" resultType="int">
        SELECT count(1)
        FROM logging_event
        WHERE formatted_message like CONCAT('%','${r'${value}'}','%' )
    </select>

    <!--根据日期范围搜索日志-->
    <select id="LoggingEvent.listLoggingEventByTime" parameterType="map" resultMap="rs_base">
        SELECT
        <include refid="LoggingEvent.columns"/>
        FROM logging_event
        <where>
            <if test="createtimeBegin!=null">
                AND timestmp >= ${r'#{createtimeBegin}'}
            </if>

            <if test="createtimeEnd!=null">
                <![CDATA[ AND timestmp <= ${r'#{createtimeEnd}'}]]>
            </if>

            <if test="keyword!=null and keyword!=''">
                AND formatted_message like CONCAT('%','${r'${keyword}'}','%' )
            </if>
        </where>
    </select>

    <select id="LoggingEvent.countLoggingEventByTime" parameterType="map" resultType="int">
        SELECT count(1)
        FROM logging_event
        <where>
            <if test="createtimeBegin!=null">
                AND timestmp >= ${r'#{createtimeBegin}'}
            </if>

            <if test="createtimeEnd!=null">
                <![CDATA[ AND timestmp <= ${r'#{createtimeEnd}'}]]>
            </if>

            <if test="keyword!=null and keyword!=''">
                AND formatted_message like CONCAT('%','${r'${keyword}'}','%' )
            </if>
        </where>
    </select>


</mapper>

